from aiogram import Router, F
from aiogram.types import Message, ReplyKeyboardRemove
from aiogram.filters import Command
import html  # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –º–æ–¥—É–ª—å Python –¥–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è HTML
import logging
from datetime import datetime

from app.config import Config
from app.db.predictions import add_prediction as db_add_prediction  # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
from app.db.predictions import get_prediction  # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç –¥–ª—è /future
from app.utils.formatting import format_user
from app.utils.gigachat_api import GigaChatAPI  # –ò–º–ø–æ—Ä—Ç –Ω–æ–≤–æ–≥–æ –∫–ª–∞—Å—Å–∞ –¥–ª—è API

logger = logging.getLogger(__name__)
router = Router()

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ GigaChatAPI
gigachat_api = GigaChatAPI()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å—á—ë—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ GigaChat
GIGACHAT_REQUESTS_COUNT = 0

def build_welcome_message(name: str) -> str:
    return (
        f"<b>üöÄ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {name}!</b>\n\n"
        "–Ø —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ —ç—Ç–æ–º —á–∞—Ç–µ. –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n"
        "‚Ä¢ –û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã\n‚Ä¢ –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –∫–∞—Ä–º—É\n‚Ä¢ –î–∞–≤–∞—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è\n\n"
        "–ù–∞–ø–∏—à–∏ /help —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã!"
    )

@router.message(F.chat.type.in_({"private"}), Command("start"))
async def cmd_start(message: Message):
    try:
        user_name = html.escape(message.from_user.full_name)
        await message.reply(
            text=build_welcome_message(user_name),
            disable_web_page_preview=True
        )
        logger.info(f"Sent start message to user {message.from_user.id}")
    except Exception as e:
        logger.exception(f"Start command error: {e}")

@router.message(F.chat.id == Config.GROUP_ID, F.content_type == "new_chat_members")
async def handle_new_members(message: Message):
    for user in message.new_chat_members:
        try:
            safe_name = html.escape(user.full_name)
            await message.reply(
                text=build_welcome_message(safe_name),
                reply_markup=ReplyKeyboardRemove(),
                disable_web_page_preview=True
            )
            logger.info(f"Sent welcome to {user.id}")
        except Exception as e:
            logger.exception(f"Welcome error: {e}")

def build_help_message() -> str:
    # –ë–∞–∑–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Å–ø—Ä–∞–≤–∫–∏
    help_text = (
        "<b>ü§ñ –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:</b>\n\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "/future - –ü–æ–ª—É—á–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ üîÆ\n"
        "/karma - –ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—à—É –∫–∞—Ä–º—É üèÜ\n"
        "/topkarma - –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∫–∞—Ä–º–µ üèÖ\n"
        "/antikarma - –¢–æ–ø –∞–Ω—Ç–∏–∫–∞—Ä–º—ã üòà\n"
        "/add_prediction [—Ç–µ–∫—Å—Ç] - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é —Ç–µ–º—É (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)\n\n"
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–ø–∏–∫–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –Ω–∞—Å—Ç—Ä–æ–µ–Ω
    if Config.ALLOWED_TOPIC_ID is not None and Config.ALLOWED_TOPIC_URL != "—ç—Ç–æ—Ç —á–∞—Ç":
        help_text += (
            f"<i>–î–ª—è —Ä–∞–±–æ—Ç—ã –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –∫–æ–º–∞–Ω–¥ –Ω—É–∂–Ω–æ –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–º —Ç–æ–ø–∏–∫–µ. "
            f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ {Config.ALLOWED_TOPIC_URL}</i>"
        )
    
    return help_text

@router.message(F.chat.id == Config.GROUP_ID, Command("help"))
async def send_help(message: Message):
    try:
        await message.reply(
            text=build_help_message(),
            disable_web_page_preview=True
        )
    except Exception as e:
        logger.exception(f"Help error: {e}")

@router.message(F.chat.type.in_({"private"}), Command("help"))
async def private_send_help(message: Message):
    try:
        await message.reply(
            text=build_help_message(),
            disable_web_page_preview=True
        )
    except Exception as e:
        logger.exception(f"Private help error: {e}")

# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /future, –∫–æ—Ç–æ—Ä–∞—è —É–ø–æ–º–∏–Ω–∞–µ—Ç—Å—è –≤ help_message
@router.message(Command("future"))
async def cmd_future(message: Message):
    try:
        user = message.from_user
        prediction = await get_prediction()
        
        await message.reply(
            f"üîÆ {format_user(user)}, –≤–∞—à–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ:\n\n{prediction}",
            disable_web_page_preview=True
        )
        logger.info(f"Prediction sent to user {user.id}")
    except Exception as e:
        logger.exception(f"Future prediction error: {e}")
        await message.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è")

@router.message(Command("add_prediction"))
async def add_new_prediction(message: Message):
    if message.from_user.id not in Config.ALLOWED_IDS:
        return await message.reply("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –ª–∏ –ø—Ä–æ–º—Ç –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã
        command_parts = message.text.split(maxsplit=1)
        
        # –ï—Å–ª–∏ –¥–ª–∏–Ω–∞ –º–∞—Å—Å–∏–≤–∞ —Ä–∞–≤–Ω–∞ 1, –∑–Ω–∞—á–∏—Ç –ø—Ä–æ–º—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
        if len(command_parts) == 1:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ä–æ–±–Ω—É—é –ø–æ–¥—Å–∫–∞–∑–∫—É
            return await message.reply(
                "‚ÑπÔ∏è –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è —É–∫–∞–∂–∏—Ç–µ —Ç–µ–º—É:\n\n"
                "/add_prediction [—Ç–µ–º–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è]\n\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
                "/add_prediction —Ä–∞–±–æ—Ç–∞ –∏ –∫–∞—Ä—å–µ—Ä–∞\n"
                "/add_prediction –ª—é–±–æ–≤—å –∏ –æ—Ç–Ω–æ—à–µ–Ω–∏—è\n"
                "/add_prediction –∑–¥–æ—Ä–æ–≤—å–µ –∏ –±–ª–∞–≥–æ–ø–æ–ª—É—á–∏–µ\n\n"
                "–ú–æ–¥–µ–ª—å GigaChat —Å–æ–∑–¥–∞—Å—Ç –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é —Ç–µ–º—É."
            )
        
        # –ï—Å–ª–∏ –ø—Ä–æ–º—Ç —É–∫–∞–∑–∞–Ω, –ø–æ–ª—É—á–∞–µ–º –µ–≥–æ
        prompt = command_parts[1]
    except IndexError:
        return await message.reply("‚ÑπÔ∏è –£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è")

    try:
        global GIGACHAT_REQUESTS_COUNT
        if GIGACHAT_REQUESTS_COUNT >= Config.GIGACHAT_DAILY_LIMIT:
            raise ValueError(
                f"‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç ({Config.GIGACHAT_DAILY_LIMIT} –∑–∞–ø—Ä–æ—Å–æ–≤). "
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞."
            )

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º GigaChatAPI –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
        prediction = await gigachat_api.generate_prediction(prompt)
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –≤ –ë–î
        await db_add_prediction(message.from_user.id, prediction)

        GIGACHAT_REQUESTS_COUNT += 1
        await message.reply(
            f"‚úÖ –ù–æ–≤–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ:\n\n{prediction}\n\n"
            f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –∑–∞–ø—Ä–æ—Å–æ–≤ —Å–µ–≥–æ–¥–Ω—è: {GIGACHAT_REQUESTS_COUNT}/{Config.GIGACHAT_DAILY_LIMIT}"
        )

    except Exception as e:
        logger.error(f"Prediction error: {e}")
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")