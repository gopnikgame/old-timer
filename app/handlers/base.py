from aiogram import Router, F
from aiogram.types import Message, ReplyKeyboardRemove
from aiogram.filters import Command
from aiogram import html
import httpx
import logging
from datetime import datetime

from app.config import Config
from app.db.predictions import add_prediction  # Import the async add_prediction function
from app.utils.formatting import format_user

logger = logging.getLogger(__name__)
router = Router()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å—á—ë—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ DeepSeek (TODO: –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ)
DEEPSEEK_REQUESTS_COUNT = 0

def build_welcome_message(name: str) -> str:
    return (
        f"<b>üöÄ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {name}!</b>\n\n"
        "–Ø —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ —ç—Ç–æ–º —á–∞—Ç–µ. –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:\n"
        "‚Ä¢ –û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã\n‚Ä¢ –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –∫–∞—Ä–º—É\n‚Ä¢ –î–∞–≤–∞—Ç—å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è\n\n"
        "–ù–∞–ø–∏—à–∏ /help —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã!"
    )

@router.message(F.chat.id == Config.GROUP_ID, F.content_type == "new_chat_members")
async def handle_new_members(message: Message):
    for user in message.new_chat_members:
        try:
            safe_name = html.escape(user.full_name)
            await message.reply(
                text=build_welcome_message(safe_name),
                parse_mode="HTML",
                reply_markup=ReplyKeyboardRemove(),
                disable_web_page_preview=True
            )
            logger.info(f"Sent welcome to {user.id}")
        except Exception as e:
            logger.exception(f"Welcome error: {e}")

def build_help_message() -> str:
    return (
        "<b>ü§ñ –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:</b>\n\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "/future - –ü–æ–ª—É—á–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ üîÆ\n"
        "/karma - –ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—à—É –∫–∞—Ä–º—É üèÜ\n"
        "/topkarma - –¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∫–∞—Ä–º–µ üèÖ\n"
        "/antikarma - –¢–æ–ø –∞–Ω—Ç–∏–∫–∞—Ä–º—ã üòà\n"
        "/add_prediction [—Ç–µ–∫—Å—Ç] - –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)\n\n"
        "<i>–î–ª—è —Ä–∞–±–æ—Ç—ã –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –∫–æ–º–∞–Ω–¥ –Ω—É–∂–Ω–æ –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–º —Ç–æ–ø–∏–∫–µ. "
        f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ {Config.ALLOWED_TOPIC_URL}</i>"
    )

@router.message(F.chat.id == Config.GROUP_ID, Command("help"))
async def send_help(message: Message):
    try:
        await message.reply(
            text=build_help_message(),
            parse_mode="HTML",
            disable_web_page_preview=True
        )
    except Exception as e:
        logger.exception(f"Help error: {e}")

async def generate_with_deepseek(prompt: str) -> str:
    global DEEPSEEK_REQUESTS_COUNT

    if DEEPSEEK_REQUESTS_COUNT >= Config.DEEPSEEK_DAILY_LIMIT:
        raise ValueError("–î–æ—Å—Ç–∏–≥–Ω—É—Ç –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤")

    headers = {
        "Authorization": f"Bearer {Config.DEEPSEEK_API_KEY}",
        "Content-Type": "application/json"
    }

    payload = {
        "model": "deepseek-chat",
        "messages": [{
            "role": "user",
            "content": f"–ü—Ä–∏–¥—É–º–∞–π –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–ª—è —á–∞—Ç–∞ –Ω–∞ —Ç–µ–º—É: {prompt}. "
                      "–ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏ –∏ —Å–¥–µ–ª–∞–π —Ç–µ–∫—Å—Ç –∂–∏–≤—ã–º. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π markdown."
        }],
        "temperature": 0.7,
        "max_tokens": 100
    }

    try:
        async with httpx.AsyncClient(timeout=30) as client:
            response = await client.post(
                "https://api.deepseek.com/v1/chat/completions",
                json=payload,
                headers=headers
            )

        if response.status_code != 200:
            logger.error(f"DeepSeek API error: {response.status_code} - {response.text}")
            raise ConnectionError(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API: {response.status_code}")

        DEEPSEEK_REQUESTS_COUNT += 1
        return response.json()["choices"][0]["message"]["content"]

    except httpx.RequestError as e:
        logger.error(f"DeepSeek API connection error: {e}")
        raise ConnectionError("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ API") from e
    except Exception as e:
        logger.exception(f"DeepSeek API error: {e}")
        raise

@router.message(F.chat.id == Config.GROUP_ID, Command("add_prediction"))
async def add_prediction(message: Message):
    if message.from_user.id not in Config.ALLOWED_IDS:
        return await message.reply("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!")

    try:
        prompt = message.text.split(maxsplit=1)[1]
    except IndexError:
        return await message.reply("‚ÑπÔ∏è –£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è")

    try:
        if DEEPSEEK_REQUESTS_COUNT >= Config.DEEPSEEK_DAILY_LIMIT:
            raise ValueError(
                f"‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç ({Config.DEEPSEEK_DAILY_LIMIT} –∑–∞–ø—Ä–æ—Å–æ–≤). "
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞."
            )

        prediction = await generate_with_deepseek(prompt)
        # Use the add_prediction function from app.db.predictions
        await add_prediction(message.from_user.id, prediction)

        await message.reply(
            f"‚úÖ –ù–æ–≤–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ:\n\n{prediction}\n\n"
            f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –∑–∞–ø—Ä–æ—Å–æ–≤ —Å–µ–≥–æ–¥–Ω—è: {DEEPSEEK_REQUESTS_COUNT}/{Config.DEEPSEEK_DAILY_LIMIT}",
            parse_mode="HTML"
        )

    except Exception as e:
        logger.error(f"Prediction error: {e}")
        await message.reply(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")