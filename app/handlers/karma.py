from aiogram import Router, F
from aiogram.types import Message
from aiogram.filters import Command
import logging

from app.config import Config
from app.db.karma import get_karma, update_karma, get_top_karma, get_bottom_karma
from app.utils.formatting import format_user

logger = logging.getLogger(__name__)
router = Router()

@router.message(F.chat.id == Config.GROUP_ID, Command("karma"))
async def show_karma(message: Message):
    try:
        user_id = message.from_user.id
        karma_value = await get_karma(user_id)
        
        await message.reply(
            f"üèÜ {format_user(message.from_user)}, –≤–∞—à–∞ –∫–∞—Ä–º–∞: {karma_value}",
            parse_mode="HTML"
        )
        logger.info(f"Karma shown for user {user_id}")
    except Exception as e:
        logger.exception(f"Error showing karma: {e}")
        await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–∞—Ä–º—ã")

@router.message(F.chat.id == Config.GROUP_ID, Command("topkarma"))
async def show_top_karma(message: Message):
    try:
        top_users = await get_top_karma(10)  # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø-10
        
        if not top_users:
            return await message.reply("üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞—Ä–º–µ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        
        response = "üèÖ <b>–¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –∫–∞—Ä–º–µ:</b>\n\n"
        
        # –í —ç—Ç–æ–º –º–µ—Å—Ç–µ –Ω–∞–º –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
        # –ù–æ –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è –≤—ã–≤–µ–¥–µ–º —Ç–æ–ª—å–∫–æ ID –∏ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–∞—Ä–º—ã
        for i, record in enumerate(top_users, 1):
            response += f"{i}. ID: {record['user_id']} ‚Äî {record['karma']} –æ—á–∫–æ–≤\n"
        
        await message.reply(response, parse_mode="HTML")
        logger.info("Top karma shown")
    except Exception as e:
        logger.exception(f"Error showing top karma: {e}")
        await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–ø–∞ –∫–∞—Ä–º—ã")

@router.message(F.chat.id == Config.GROUP_ID, Command("antikarma"))
async def show_bottom_karma(message: Message):
    try:
        bottom_users = await get_bottom_karma(10)  # –ü–æ–ª—É—á–∞–µ–º –∞–Ω—Ç–∏-—Ç–æ–ø-10
        
        if not bottom_users:
            return await message.reply("üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞—Ä–º–µ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        
        response = "üòà <b>–ê–Ω—Ç–∏—Ä–µ–π—Ç–∏–Ω–≥ –∫–∞—Ä–º—ã:</b>\n\n"
        
        # –í —ç—Ç–æ–º –º–µ—Å—Ç–µ –Ω–∞–º –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
        # –ù–æ –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è –≤—ã–≤–µ–¥–µ–º —Ç–æ–ª—å–∫–æ ID –∏ –∑–Ω–∞—á–µ–Ω–∏–µ –∫–∞—Ä–º—ã
        for i, record in enumerate(bottom_users, 1):
            response += f"{i}. ID: {record['user_id']} ‚Äî {record['karma']} –æ—á–∫–æ–≤\n"
        
        await message.reply(response, parse_mode="HTML")
        logger.info("Bottom karma shown")
    except Exception as e:
        logger.exception(f"Error showing bottom karma: {e}")
        await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–Ω—Ç–∏—Ç–æ–ø–∞ –∫–∞—Ä–º—ã")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–∞—Ä–º—ã —á–µ—Ä–µ–∑ —Ä–µ–∞–∫—Ü–∏–∏ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
@router.message(F.chat.id == Config.GROUP_ID, F.text.regexp(r"^(\+|\-)$"))
async def karma_reaction(message: Message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —è–≤–ª—è–µ—Ç—Å—è –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ –¥—Ä—É–≥–æ–µ
    if not message.reply_to_message:
        return
    
    target_user = message.reply_to_message.from_user
    current_user = message.from_user
    
    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω—è—Ç—å —Å–≤–æ—é –∫–∞—Ä–º—É
    if target_user.id == current_user.id:
        return await message.reply("‚ùå –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω—è—Ç—å —Å–≤–æ—é –∫–∞—Ä–º—É")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∫–∞—Ä–º—ã
    karma_change = 1 if message.text == "+" else -1
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä–º—É
    success = await update_karma(target_user.id, karma_change)
    if success:
        new_karma = await get_karma(target_user.id)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫–∞—Ä–º—ã
        if karma_change > 0:
            await message.reply(
                f"‚¨ÜÔ∏è {format_user(current_user)} –ø–æ–≤—ã—Å–∏–ª –∫–∞—Ä–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {format_user(target_user)}\n"
                f"–¢–µ–∫—É—â–∞—è –∫–∞—Ä–º–∞: {new_karma}",
                parse_mode="HTML"
            )
        else:
            await message.reply(
                f"‚¨áÔ∏è {format_user(current_user)} –ø–æ–Ω–∏–∑–∏–ª –∫–∞—Ä–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {format_user(target_user)}\n"
                f"–¢–µ–∫—É—â–∞—è –∫–∞—Ä–º–∞: {new_karma}",
                parse_mode="HTML"
            )
    
    logger.info(f"Karma {karma_change} by {current_user.id} to {target_user.id}")
